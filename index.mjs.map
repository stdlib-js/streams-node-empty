{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/debug.js","../lib/main.js","../lib/object_mode.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0fx2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( '0fx30', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'empty-stream' );\n\n\n// EXPORTS //\n\nexport default debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nimport isError from '@stdlib/assert-is-error' ;\nimport copy from '@stdlib/utils-copy' ;\nimport inherit from '@stdlib/utils-inherit' ;\nimport setNonEnumerable from '@stdlib/utils-define-nonenumerable-property' ;\nimport setNonEnumerableReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport nextTick from '@stdlib/utils-next-tick' ;\nimport DEFAULTS from './defaults.json' ;\nimport validate from './validate.js' ;\nimport debug from './debug.js' ;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tthis.push( null );\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {EmptyStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for creating an \"empty\" stream.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {EmptyStream} Stream instance\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink' ;\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var stream = new EmptyStream();\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction EmptyStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof EmptyStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new EmptyStream( options );\n\t\t}\n\t\treturn new EmptyStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( EmptyStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof EmptyStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( EmptyStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof EmptyStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {EmptyStream} Stream instance\n*/\nsetNonEnumerableReadOnly( EmptyStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nexport default EmptyStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport EmptyStream from './main.js' ;\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" empty readable stream.\n*\n* @returns {EmptyStream} Stream instance\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink' ;\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var stream = objectMode();\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode() {\n\tvar opts = {\n\t\t'objectMode': true\n\t};\n\treturn new EmptyStream( opts );\n}\n\n\n// EXPORTS //\n\nexport default objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copy from '@stdlib/utils-copy' ;\nimport EmptyStream from './main.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a function for creating \"empty\" readable streams.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'objectMode': false\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns an \"empty\" readable stream.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {EmptyStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new EmptyStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an \"empty\" readable stream.\n*\n* @module @stdlib/streams-node-empty\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink' ;\n* import emptyStream from '@stdlib/streams-node-empty' ;\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var stream = emptyStream();\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* import emptyStream from '@stdlib/streams-node-empty' ;\n*\n* var opts = {\n*     'objectMode': false\n* };\n*\n* var createStream = emptyStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink' ;\n* import emptyStream from '@stdlib/streams-node-empty' ;\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var stream = emptyStream.objectMode();\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport objectMode from './object_mode.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["validate","opts","options","isObject","hasOwnProp","objectMode","isBoolean","TypeError","format","debug","logger","Readable","require$$0","EmptyStream","err","this","arguments","length","copy","DEFAULTS","JSON","stringify","call","setNonEnumerable","factory","createStream","inherit","setNonEnumerableReadOnly","prototype","push","error","self","_destroyed","nextTick","isError","message","emit","setReadOnly","main"],"mappings":";;kjvDAiDA,SAASA,GAAUC,EAAMC,GACxB,OAAMC,EAAUD,GAGXE,EAAYF,EAAS,gBACzBD,EAAKI,WAAaH,EAAQG,YACpBC,EAAWL,EAAKI,aACd,IAAIE,UAAWC,EAAQ,QAAS,aAAcP,EAAKI,aAGrD,KARC,IAAIE,UAAWC,EAAQ,QAASN,GASzC,KCjCIO,wDAAQC,CAAQ,gBCLhBC,GAAWC,GAA6BD,SA0F5C,SAASE,GAAaX,GACrB,IAAID,EACAa,EACJ,KAAQC,gBAAgBF,IACvB,OAAKG,UAAUC,OAAS,EAChB,IAAIJ,GAAaX,GAElB,IAAIW,GAGZ,GADAZ,EAAOiB,EAAMC,IACRH,UAAUC,OAAS,IACvBH,EAAMd,GAAUC,EAAMC,IAErB,MAAMY,EAUR,OANAL,GAAO,wEAAyEW,KAAKC,UAAWpB,IAChGU,GAASW,KAAMP,KAAMd,GAGrBsB,EAAkBR,KAAM,cAAc,GAE/BA,IACR,CC7FA,SAASV,KAIR,OAAO,IAAIQ,GAHA,CACVR,YAAc,GAGhB,CCCA,SAASmB,GAAStB,GACjB,IAAID,EAMJ,OAJCA,EADIe,UAAUC,OAAS,EAChBC,EAAMhB,EAAS,GAEf,CAAA,EAEDuB,EAUP,SAASA,IACR,OAAO,IAAIZ,GAAaZ,EACxB,CACF,CFwEAyB,EAASb,GAAaF,IAYtBgB,EAA0Bd,GAAYe,UAAW,SA9GjD,WAECb,KAAKc,KAAM,KAGZ,IAoHAF,EAA0Bd,GAAYe,UAAW,WA3GjD,SAAkBE,GAEjB,IAAIC,EACJ,OAAKhB,KAAKiB,YACTvB,GAAO,qDACAM,OAERgB,EAAOhB,KACPA,KAAKiB,YAAa,EAElBC,GASA,WACMH,IACJrB,GAAO,mDAAsDyB,EAASJ,GAAYA,EAAMK,QAAUf,KAAKC,UAAWS,IAClHC,EAAKK,KAAM,QAASN,IAErBrB,GAAO,yBACPsB,EAAKK,KAAM,QACX,IAdMrB,KAiBR,IGTAsB,EAAAC,GAAA,aAAAjC,IACAgC,EAAAC,GAAA,UAAAd"}